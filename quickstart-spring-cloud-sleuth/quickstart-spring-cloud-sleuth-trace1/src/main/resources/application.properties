spring.application.name=trace-1
server.port=9101

eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/


#Zipkin Server的配置信息
#如果在zip-server应用中，我们将其端口设置为9411，并且均在本地调试的话，该参数也可以不配置，因为默认值就是http://localhost:9411）。
#spring.zipkin.base-url=http://localhost:9411

#在application.properties配置中去掉HTTP方式实现时使用的spring.zipkin.base-url参数，并根据实际部署情况，增加消息中间件的相关配置，
#比如下面这些关于RabbitMQ的配置信息：
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=springcloud
spring.rabbitmq.password=123456


#采样率，测试环境设置为1，就是100%
#以请求百分比的方式配置和收集跟踪信息，它的默认值为0.1，代表收集10%的请求跟踪信息
spring.sleuth.sampler.percentage=1

# log trace detail
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG



#这些元素正是实现分布式服务跟踪的重要组成部分，它们每个值的含义如下：
#第一个值：trace-1，它记录了应用的名称，也就是application.properties中spring.application.name参数配置的属性。
#第二个值：f410ab57afd5c145，Spring Cloud Sleuth生成的一个ID，称为Trace ID，它用来标识一条请求链路。一条请求链路中包含一个Trace ID，多个Span ID。
#第三个值：a9f2118fa2019684，Spring Cloud Sleuth生成的另外一个ID，称为Span ID，它表示一个基本的工作单元，比如：发送一个HTTP请求。
#第四个值：false，表示是否要将该信息输出到Zipkin等服务中来收集和展示。

#上面四个值中的Trace ID和Span ID是Spring Cloud Sleuth实现分布式服务跟踪的核心。在一次服务请求链路的调用过程中，会保持并传递同一个Trace ID，从而将整个分布于不同微服务进程中的请求跟踪信息串联起来，以上面输出内容为例，trace-1和trace-2同属于一个前端服务请求来源，所以他们的Trace ID是相同的，处于同一条请求链路中。




